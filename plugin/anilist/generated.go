// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package anilist

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// MediaByIdMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type MediaByIdMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The mal id of the media
	IdMal int `json:"idMal"`
	// If the media is intended only for 18+ adult audiences
	IsAdult bool `json:"isAdult"`
	// The url for the media page on the AniList website
	SiteUrl string `json:"siteUrl"`
	// The official titles of the media in various languages
	Title MediaByIdMediaTitle `json:"title"`
	// The format the media was released in
	Format MediaFormat `json:"format"`
	// The current releasing status of the media
	Status MediaStatus `json:"status"`
	// Short description of the media's story and characters
	Description string `json:"description"`
	// The first official release date of the media
	StartDate MediaByIdMediaStartDateFuzzyDate `json:"startDate"`
	// The last official release date of the media
	EndDate MediaByIdMediaEndDateFuzzyDate `json:"endDate"`
	// The media's next episode airing schedule
	NextAiringEpisode MediaByIdMediaNextAiringEpisodeAiringSchedule `json:"nextAiringEpisode"`
	// The season the media was initially released in
	Season MediaSeason `json:"season"`
	// The season year the media was initially released in
	SeasonYear int `json:"seasonYear"`
	// The amount of episodes the anime has when complete
	Episodes int `json:"episodes"`
	// The general length of each anime episode in minutes
	Duration int `json:"duration"`
	// Source type the media was adapted from.
	Source MediaSource `json:"source"`
	// Official Twitter hashtags for the media
	Hashtag string `json:"hashtag"`
	// The cover images of the media
	CoverImage MediaByIdMediaCoverImage `json:"coverImage"`
	// The genres of the media
	Genres []string `json:"genres"`
	// Alternative titles of the media
	Synonyms []string `json:"synonyms"`
	// A weighted average score of all the user's scores of the media
	AverageScore int `json:"averageScore"`
	// The number of users with the media on their list
	Popularity int `json:"popularity"`
	// List of tags that describes elements and themes of the media
	Tags []MediaByIdMediaTagsMediaTag `json:"tags"`
	// Other media in the same or connecting franchise
	Relations MediaByIdMediaRelationsMediaConnection `json:"relations"`
	// The companies who produced the media
	Studios MediaByIdMediaStudiosStudioConnection `json:"studios"`
}

// GetId returns MediaByIdMedia.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetId() int { return v.Id }

// GetIdMal returns MediaByIdMedia.IdMal, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetIdMal() int { return v.IdMal }

// GetIsAdult returns MediaByIdMedia.IsAdult, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetIsAdult() bool { return v.IsAdult }

// GetSiteUrl returns MediaByIdMedia.SiteUrl, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetSiteUrl() string { return v.SiteUrl }

// GetTitle returns MediaByIdMedia.Title, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetTitle() MediaByIdMediaTitle { return v.Title }

// GetFormat returns MediaByIdMedia.Format, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetFormat() MediaFormat { return v.Format }

// GetStatus returns MediaByIdMedia.Status, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetStatus() MediaStatus { return v.Status }

// GetDescription returns MediaByIdMedia.Description, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetDescription() string { return v.Description }

// GetStartDate returns MediaByIdMedia.StartDate, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetStartDate() MediaByIdMediaStartDateFuzzyDate { return v.StartDate }

// GetEndDate returns MediaByIdMedia.EndDate, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetEndDate() MediaByIdMediaEndDateFuzzyDate { return v.EndDate }

// GetNextAiringEpisode returns MediaByIdMedia.NextAiringEpisode, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetNextAiringEpisode() MediaByIdMediaNextAiringEpisodeAiringSchedule {
	return v.NextAiringEpisode
}

// GetSeason returns MediaByIdMedia.Season, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetSeason() MediaSeason { return v.Season }

// GetSeasonYear returns MediaByIdMedia.SeasonYear, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetSeasonYear() int { return v.SeasonYear }

// GetEpisodes returns MediaByIdMedia.Episodes, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetEpisodes() int { return v.Episodes }

// GetDuration returns MediaByIdMedia.Duration, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetDuration() int { return v.Duration }

// GetSource returns MediaByIdMedia.Source, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetSource() MediaSource { return v.Source }

// GetHashtag returns MediaByIdMedia.Hashtag, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetHashtag() string { return v.Hashtag }

// GetCoverImage returns MediaByIdMedia.CoverImage, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetCoverImage() MediaByIdMediaCoverImage { return v.CoverImage }

// GetGenres returns MediaByIdMedia.Genres, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetGenres() []string { return v.Genres }

// GetSynonyms returns MediaByIdMedia.Synonyms, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetSynonyms() []string { return v.Synonyms }

// GetAverageScore returns MediaByIdMedia.AverageScore, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetAverageScore() int { return v.AverageScore }

// GetPopularity returns MediaByIdMedia.Popularity, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetPopularity() int { return v.Popularity }

// GetTags returns MediaByIdMedia.Tags, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetTags() []MediaByIdMediaTagsMediaTag { return v.Tags }

// GetRelations returns MediaByIdMedia.Relations, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetRelations() MediaByIdMediaRelationsMediaConnection { return v.Relations }

// GetStudios returns MediaByIdMedia.Studios, and is useful for accessing the field via an interface.
func (v *MediaByIdMedia) GetStudios() MediaByIdMediaStudiosStudioConnection { return v.Studios }

// MediaByIdMediaCoverImage includes the requested fields of the GraphQL type MediaCoverImage.
type MediaByIdMediaCoverImage struct {
	// The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.
	ExtraLarge string `json:"extraLarge"`
}

// GetExtraLarge returns MediaByIdMediaCoverImage.ExtraLarge, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaCoverImage) GetExtraLarge() string { return v.ExtraLarge }

// MediaByIdMediaEndDateFuzzyDate includes the requested fields of the GraphQL type FuzzyDate.
// The GraphQL type's documentation follows.
//
// Date object that allows for incomplete date values (fuzzy)
type MediaByIdMediaEndDateFuzzyDate struct {
	// Numeric Year (2017)
	Year int `json:"year"`
	// Numeric Month (3)
	Month int `json:"month"`
	// Numeric Day (24)
	Day int `json:"day"`
}

// GetYear returns MediaByIdMediaEndDateFuzzyDate.Year, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaEndDateFuzzyDate) GetYear() int { return v.Year }

// GetMonth returns MediaByIdMediaEndDateFuzzyDate.Month, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaEndDateFuzzyDate) GetMonth() int { return v.Month }

// GetDay returns MediaByIdMediaEndDateFuzzyDate.Day, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaEndDateFuzzyDate) GetDay() int { return v.Day }

// MediaByIdMediaNextAiringEpisodeAiringSchedule includes the requested fields of the GraphQL type AiringSchedule.
// The GraphQL type's documentation follows.
//
// Media Airing Schedule. NOTE: We only aim to guarantee that FUTURE airing data is present and accurate.
type MediaByIdMediaNextAiringEpisodeAiringSchedule struct {
	// The id of the airing schedule item
	Id int `json:"id"`
	// The airing episode number
	Episode int `json:"episode"`
	// The time the episode airs at
	AiringAt int `json:"airingAt"`
}

// GetId returns MediaByIdMediaNextAiringEpisodeAiringSchedule.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaNextAiringEpisodeAiringSchedule) GetId() int { return v.Id }

// GetEpisode returns MediaByIdMediaNextAiringEpisodeAiringSchedule.Episode, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaNextAiringEpisodeAiringSchedule) GetEpisode() int { return v.Episode }

// GetAiringAt returns MediaByIdMediaNextAiringEpisodeAiringSchedule.AiringAt, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaNextAiringEpisodeAiringSchedule) GetAiringAt() int { return v.AiringAt }

// MediaByIdMediaRelationsMediaConnection includes the requested fields of the GraphQL type MediaConnection.
type MediaByIdMediaRelationsMediaConnection struct {
	Edges []MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge `json:"edges"`
}

// GetEdges returns MediaByIdMediaRelationsMediaConnection.Edges, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnection) GetEdges() []MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge {
	return v.Edges
}

// MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge includes the requested fields of the GraphQL type MediaEdge.
// The GraphQL type's documentation follows.
//
// Media connection edge
type MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge struct {
	// The id of the connection
	Id int `json:"id"`
	// The type of relation to the parent model
	RelationType MediaRelation                                                 `json:"relationType"`
	Node         MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia `json:"node"`
}

// GetId returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge) GetId() int { return v.Id }

// GetRelationType returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge.RelationType, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge) GetRelationType() MediaRelation {
	return v.RelationType
}

// GetNode returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge.Node, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdge) GetNode() MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia {
	return v.Node
}

// MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia struct {
	// The type of the media; anime or manga
	Type MediaType `json:"type"`
	// The id of the media
	Id int `json:"id"`
	// The official titles of the media in various languages
	Title MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle `json:"title"`
}

// GetType returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia.Type, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia) GetType() MediaType {
	return v.Type
}

// GetId returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia) GetId() int { return v.Id }

// GetTitle returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia.Title, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMedia) GetTitle() MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle {
	return v.Title
}

// MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
}

// GetRomaji returns MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaRelationsMediaConnectionEdgesMediaEdgeNodeMediaTitle) GetRomaji() string {
	return v.Romaji
}

// MediaByIdMediaStartDateFuzzyDate includes the requested fields of the GraphQL type FuzzyDate.
// The GraphQL type's documentation follows.
//
// Date object that allows for incomplete date values (fuzzy)
type MediaByIdMediaStartDateFuzzyDate struct {
	// Numeric Year (2017)
	Year int `json:"year"`
	// Numeric Month (3)
	Month int `json:"month"`
	// Numeric Day (24)
	Day int `json:"day"`
}

// GetYear returns MediaByIdMediaStartDateFuzzyDate.Year, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStartDateFuzzyDate) GetYear() int { return v.Year }

// GetMonth returns MediaByIdMediaStartDateFuzzyDate.Month, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStartDateFuzzyDate) GetMonth() int { return v.Month }

// GetDay returns MediaByIdMediaStartDateFuzzyDate.Day, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStartDateFuzzyDate) GetDay() int { return v.Day }

// MediaByIdMediaStudiosStudioConnection includes the requested fields of the GraphQL type StudioConnection.
type MediaByIdMediaStudiosStudioConnection struct {
	Nodes []MediaByIdMediaStudiosStudioConnectionNodesStudio `json:"nodes"`
}

// GetNodes returns MediaByIdMediaStudiosStudioConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStudiosStudioConnection) GetNodes() []MediaByIdMediaStudiosStudioConnectionNodesStudio {
	return v.Nodes
}

// MediaByIdMediaStudiosStudioConnectionNodesStudio includes the requested fields of the GraphQL type Studio.
// The GraphQL type's documentation follows.
//
// Animation or production company
type MediaByIdMediaStudiosStudioConnectionNodesStudio struct {
	// The id of the studio
	Id int `json:"id"`
	// The name of the studio
	Name string `json:"name"`
}

// GetId returns MediaByIdMediaStudiosStudioConnectionNodesStudio.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStudiosStudioConnectionNodesStudio) GetId() int { return v.Id }

// GetName returns MediaByIdMediaStudiosStudioConnectionNodesStudio.Name, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaStudiosStudioConnectionNodesStudio) GetName() string { return v.Name }

// MediaByIdMediaTagsMediaTag includes the requested fields of the GraphQL type MediaTag.
// The GraphQL type's documentation follows.
//
// A tag that describes a theme or element of the media
type MediaByIdMediaTagsMediaTag struct {
	// The id of the tag
	Id int `json:"id"`
	// The name of the tag
	Name string `json:"name"`
	// If the tag could be a spoiler for any media
	IsGeneralSpoiler bool `json:"isGeneralSpoiler"`
	// The relevance ranking of the tag out of the 100 for this media
	Rank int `json:"rank"`
}

// GetId returns MediaByIdMediaTagsMediaTag.Id, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTagsMediaTag) GetId() int { return v.Id }

// GetName returns MediaByIdMediaTagsMediaTag.Name, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTagsMediaTag) GetName() string { return v.Name }

// GetIsGeneralSpoiler returns MediaByIdMediaTagsMediaTag.IsGeneralSpoiler, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTagsMediaTag) GetIsGeneralSpoiler() bool { return v.IsGeneralSpoiler }

// GetRank returns MediaByIdMediaTagsMediaTag.Rank, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTagsMediaTag) GetRank() int { return v.Rank }

// MediaByIdMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type MediaByIdMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
	// The official english title
	English string `json:"english"`
	// Official title in it's native language
	Native string `json:"native"`
}

// GetRomaji returns MediaByIdMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTitle) GetRomaji() string { return v.Romaji }

// GetEnglish returns MediaByIdMediaTitle.English, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTitle) GetEnglish() string { return v.English }

// GetNative returns MediaByIdMediaTitle.Native, and is useful for accessing the field via an interface.
func (v *MediaByIdMediaTitle) GetNative() string { return v.Native }

// MediaByIdResponse is returned by MediaById on success.
type MediaByIdResponse struct {
	// Media query
	Media MediaByIdMedia `json:"Media"`
}

// GetMedia returns MediaByIdResponse.Media, and is useful for accessing the field via an interface.
func (v *MediaByIdResponse) GetMedia() MediaByIdMedia { return v.Media }

// The format the media was released in
type MediaFormat string

const (
	// Anime broadcast on television
	MediaFormatTv MediaFormat = "TV"
	// Anime which are under 15 minutes in length and broadcast on television
	MediaFormatTvShort MediaFormat = "TV_SHORT"
	// Anime movies with a theatrical release
	MediaFormatMovie MediaFormat = "MOVIE"
	// Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc
	MediaFormatSpecial MediaFormat = "SPECIAL"
	// (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast
	MediaFormatOva MediaFormat = "OVA"
	// (Original Net Animation) Anime that have been originally released online or are only available through streaming services.
	MediaFormatOna MediaFormat = "ONA"
	// Short anime released as a music video
	MediaFormatMusic MediaFormat = "MUSIC"
	// Professionally published manga with more than one chapter
	MediaFormatManga MediaFormat = "MANGA"
	// Written books released as a series of light novels
	MediaFormatNovel MediaFormat = "NOVEL"
	// Manga with just one chapter
	MediaFormatOneShot MediaFormat = "ONE_SHOT"
)

// Type of relation media has to its parent.
type MediaRelation string

const (
	// An adaption of this media into a different format
	MediaRelationAdaptation MediaRelation = "ADAPTATION"
	// Released before the relation
	MediaRelationPrequel MediaRelation = "PREQUEL"
	// Released after the relation
	MediaRelationSequel MediaRelation = "SEQUEL"
	// The media a side story is from
	MediaRelationParent MediaRelation = "PARENT"
	// A side story of the parent media
	MediaRelationSideStory MediaRelation = "SIDE_STORY"
	// Shares at least 1 character
	MediaRelationCharacter MediaRelation = "CHARACTER"
	// A shortened and summarized version
	MediaRelationSummary MediaRelation = "SUMMARY"
	// An alternative version of the same media
	MediaRelationAlternative MediaRelation = "ALTERNATIVE"
	// An alternative version of the media with a different primary focus
	MediaRelationSpinOff MediaRelation = "SPIN_OFF"
	// Other
	MediaRelationOther MediaRelation = "OTHER"
	// Version 2 only. The source material the media was adapted from
	MediaRelationSource MediaRelation = "SOURCE"
	// Version 2 only.
	MediaRelationCompilation MediaRelation = "COMPILATION"
	// Version 2 only.
	MediaRelationContains MediaRelation = "CONTAINS"
)

type MediaSeason string

const (
	// Months December to February
	MediaSeasonWinter MediaSeason = "WINTER"
	// Months March to May
	MediaSeasonSpring MediaSeason = "SPRING"
	// Months June to August
	MediaSeasonSummer MediaSeason = "SUMMER"
	// Months September to November
	MediaSeasonFall MediaSeason = "FALL"
)

// Source type the media was adapted from
type MediaSource string

const (
	// An original production not based of another work
	MediaSourceOriginal MediaSource = "ORIGINAL"
	// Asian comic book
	MediaSourceManga MediaSource = "MANGA"
	// Written work published in volumes
	MediaSourceLightNovel MediaSource = "LIGHT_NOVEL"
	// Video game driven primary by text and narrative
	MediaSourceVisualNovel MediaSource = "VISUAL_NOVEL"
	// Video game
	MediaSourceVideoGame MediaSource = "VIDEO_GAME"
	// Other
	MediaSourceOther MediaSource = "OTHER"
	// Version 2+ only. Written works not published in volumes
	MediaSourceNovel MediaSource = "NOVEL"
	// Version 2+ only. Self-published works
	MediaSourceDoujinshi MediaSource = "DOUJINSHI"
	// Version 2+ only. Japanese Anime
	MediaSourceAnime MediaSource = "ANIME"
	// Version 3 only. Written works published online
	MediaSourceWebNovel MediaSource = "WEB_NOVEL"
	// Version 3 only. Live action media such as movies or TV show
	MediaSourceLiveAction MediaSource = "LIVE_ACTION"
	// Version 3 only. Games excluding video games
	MediaSourceGame MediaSource = "GAME"
	// Version 3 only. Comics excluding manga
	MediaSourceComic MediaSource = "COMIC"
	// Version 3 only. Multimedia project
	MediaSourceMultimediaProject MediaSource = "MULTIMEDIA_PROJECT"
	// Version 3 only. Picture book
	MediaSourcePictureBook MediaSource = "PICTURE_BOOK"
)

// The current releasing status of the media
type MediaStatus string

const (
	// Has completed and is no longer being released
	MediaStatusFinished MediaStatus = "FINISHED"
	// Currently releasing
	MediaStatusReleasing MediaStatus = "RELEASING"
	// To be released at a later date
	MediaStatusNotYetReleased MediaStatus = "NOT_YET_RELEASED"
	// Ended before the work could be finished
	MediaStatusCancelled MediaStatus = "CANCELLED"
	// Version 2 only. Is currently paused from releasing and will resume at a later date
	MediaStatusHiatus MediaStatus = "HIATUS"
)

// Media type enum, anime or manga.
type MediaType string

const (
	// Japanese Anime
	MediaTypeAnime MediaType = "ANIME"
	// Asian comic
	MediaTypeManga MediaType = "MANGA"
)

// __MediaByIdInput is used internally by genqlient
type __MediaByIdInput struct {
	Id int `json:"id"`
}

// GetId returns __MediaByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__MediaByIdInput) GetId() int { return v.Id }

// The query or mutation executed by MediaById.
const MediaById_Operation = `
query MediaById ($id: Int!) {
	Media(id: $id, type: ANIME) {
		id
		idMal
		isAdult
		siteUrl
		title {
			romaji
			english
			native
		}
		format
		status(version: 2)
		description(asHtml: false)
		startDate {
			year
			month
			day
		}
		endDate {
			year
			month
			day
		}
		nextAiringEpisode {
			id
			episode
			airingAt
		}
		season
		seasonYear
		episodes
		duration
		source(version: 3)
		hashtag
		coverImage {
			extraLarge
		}
		genres
		synonyms
		averageScore
		popularity
		tags {
			id
			name
			isGeneralSpoiler
			rank
		}
		relations {
			edges {
				id
				relationType
				node {
					type
					id
					title {
						romaji
					}
				}
			}
		}
		studios(isMain: true) {
			nodes {
				id
				name
			}
		}
	}
}
`

func MediaById(
	ctx context.Context,
	client graphql.Client,
	id int,
) (*MediaByIdResponse, error) {
	req := &graphql.Request{
		OpName: "MediaById",
		Query:  MediaById_Operation,
		Variables: &__MediaByIdInput{
			Id: id,
		},
	}
	var err error

	var data MediaByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
